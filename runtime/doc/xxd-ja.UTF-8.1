.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH XXD 1 "May 2024" "Manual page for xxd" 
.\"
.\" 21st May 1996
.\" Man page author:
.\"    Tony Nugent <tony@sctnugen.ppp.gu.edu.au> <T.Nugent@sct.gu.edu.au>
.\"    Changes by Bram Moolenaar <Bram@vim.org>
.SH 名前
\fIxxd\fP \- 16 進ダンプを作成したり、元に戻したり。
.SH 書式
\fBxxd\fP \-h[elp]
.br
\fBxxd\fP [options] [infile [outfile]]
.br
\fBxxd\fP \-r[evert] [options] [infile [outfile]]
.SH 説明
ファイルや標準入力から 16 進ダンプを作成します。 16 進ダンプから元のバイナリに戻すこともできます。 \fBuuencode\fP(1)  や
\fBuudecode\fP(1)  のように、バイナリデータを、メールに貼り付け可能な ASCII 形式に変換できたり、標準出力に出力することもできます。
さらに、バイナリファイルにパッチを当てるという使い方もできます。
.SH オプション
\fIinfile\fP を指定しなかった場合は、標準入力が読み込まれます。 \fIinfile\fP に \`\fB\-\fP'
を指定した場合も、標準入力から読み込まれます。 \fIoutfile\fP を指定しなかった (または \`\fB\-\fP' を指定した)
場合は、標準出力に出力されます。
.PP
引数の解釈処理は適当なので注意してください。 パラメータを取らない引数は最初の一文字だけチェックされます。
引数の文字とパラメータの間のスペースは省略可能です。 パラメータは 10 進数、16 進数、8 進数で指定できます。 \fB\-c8\fP 、 \fB\-c 8\fP
、 \fB\-c 010\fP 、 \fB\-cols 8\fP はすべて同じ意味です。
.PP
.TP 
\fI\-a\fP | \fI\-autoskip\fP
オートスキップ: 連続した nul 行を一つの '*' で置き換える。
.TP 
\fI\-b\fP | \fI\-bits\fP
ビット (2進数) ダンプ。 1 オクテットが "1" と "0" の 8 文字で出力されます。 各行の行頭には 16 進数の行番号が表示されます。
行末には ASCII (または EBCDIC) で表した場合の文字が表示されます。 このモードでは \-p、\-i は機能しません。
.TP 
\fI\-e\fP
リトルエンディアンの 16 進ダンプに切り替える。 このオプションは、バイトのグループをリトルエンディアンのバイト順のワードとして扱います。
標準のグルーピングは 4 バイトですが、 \fI\-g\fP を使うことで変更可能です。 このオプションは 16 進ダンプのみに適用され、ASCII (あるいは
EBCDIC)  表示は変更されません。 このモードでは \-r、\-p、\-i は機能しません。
.TP 
\fI\-c cols \fP|\fI \-cols cols\fP
一行 <\fIcols\fP> オクテットで出力する。標準設定は 16 (\-i: 12, \-ps: 30, \-b: 6)。最大 256。
\-ps には最大値がありません。 \-ps 付きの場合、0 を指定すると単一の長い行で出力されます。
.TP 
\fI\-C\fP | \fI\-capitalize\fP
\-i を使用した際に、C インクルードファイル形式の変数名を大文字にする。
.TP 
\fI\-d\fP
オフセットを 16 進の代わりに 10 進で表示する。
.TP 
\fI\-E\fP | \fI\-EBCDIC\fP
右端に出力される文字のエンコーディングを ASCII から EBCDIC に変更する。 16 進ダンプの出力形式は変更されません。 \-r、\-p、\-i
が同時に指定された場合は何の効果もありません。
.TP 
\fI\-g bytes \fP|\fI \-groupsize bytes\fP
出力を <\fIbytes\fP> バイト (2 文字の 16 進数、または 8 文字の 2 進数) ごとにスペースで区切ります。
区切らずに出力するには \fI\-g 0\fP を指定してください。 <\fIBytes\fP> の標準設定は \fI2\fP
で、リトルエンディアンモードの場合は \fI4\fP 、 2 進ダンプの場合は \fI1\fP です。
ポストスクリプト形式やインクルード形式で出力するときは、このオプションは使われません。
.TP 
\fI\-h\fP | \fI\-help\fP
コマンドの説明を出力して終了する。変換は実行されません。
.TP 
\fI\-i\fP | \fI\-include\fP
C インクルードファイル形式で出力する。 入力ファイルの名前が付けられた静的配列の定義が出力されます。 標準入力の場合は定義の中身だけ出力されます。
.TP 
\fI\-l len \fP|\fI \-len len\fP
<\fIlen\fP> オクテットだけ出力する。
.TP 
\fI\-n name  |  \-name name\fP
\-i が使われたときに変数名の出力を上書きする。 配列は \fIname\fP と名付けられ、長さは \fIname\fP_len と名付けられます。
.TP 
\fI\-o offset\fP
表示されるファイル位置に <\fIoffset\fP> を加算する。
.TP 
\fI\-p\fP | \fI\-ps\fP | \fI\-postscript\fP | \fI\-plain\fP
ポストスクリプト形式の 16 進ダンプを出力する。別名 プレーン 16 進ダンプ。
.TP 
\fI\-r\fP | \fI\-revert\fP
元に戻す: 16 進ダンプからバイナリ形式に変換 (またはパッチ) します。 ファイルへ出力する場合、出力先のファイルは切り詰めされません。
行番号や特定の書式がないプレーン 16 進ダンプを読み込む場合は、 \fI\-r \-p\fP の組み合わせを使ってください。空白と改行は無視されます。 16
進ダンプの代わりにビットダンプを読み込むには、 \fI\-r \-b\fP の組み合わせを使ってください。
.TP 
\fI\-R\fP \fIwhen\fP
16 進の値に基づいて、16 進の値とその値の両方が同じ色でカラー表示される。 たいていは、表示可能文字と非表示可能文字を区別するのに有用です。
\fIwhen\fP は \fBnever\fP, \fBalways\fP, あるいは \fBauto\fP (デフォルト: auto)  のいずれかです。
\fB$NO_COLOR\fP 環境変数が設定されているときは、カラー表示は無効化されます。
.TP 
\fI\-seek offset\fP
\fI\-r\fP の後で使われた場合: 16 進ダンプを出力するファイルの位置に <\fIoffset\fP> を加える。
.TP 
\fI\-s [+][\-]seek\fP
infile の <\fIseek\fP> バイト目 (絶対位置、または相対位置) から開始する。 \fI+ \fPは、現在の標準入力の位置から相対的な位置を示します (標準入力から読み込むときのみ意味があります)。 \fI\- \fPは、入力の終わりからの文字数を示します
(\fI+\fP と同時に指定した場合は、現在の標準入力の位置から手前の位置を示します)。 \-s
引数を指定しなかった場合は、現在のファイル位置から開始されます。
.TP 
\fI\-u\fP
16 進数の表記に大文字を使います。指定がない場合は小文字で出力されます。
.TP 
\fI\-v\fP | \fI\-version\fP
バージョンを表示します。
.SH 警告
.PP
\fIxxd \-r\fP では行番号の評価に関しての暗黙のルールがいくつかあります。
出力ファイルがシーク可能なら、各行の行番号が順番通りに並んでなくても構いません。 位置が飛んでいても重なっていても大丈夫です。
その場合、次の位置に移動するために lseek(2) が使われます。 出力ファイルがシーク不可なら、「隙間」だけが処理可能です。 隙間は null
バイトで埋められます。
.PP
\fIxxd \-r\fP は不正な入力をエラーにしません。ゴミは静かに読み飛ばされます。
.PP
16 進ダンプを編集するときは注意が必要です。 \fIxxd \-r\fP は必要な桁 (\-c 引数参照) だけ 16
進データを読み込んで、行の残りを無視します。 つまり、ASCII (または EBCDIC) を示している列への変更は無視されます。 xxd \-r \-p
でプレーン形式 (ポストスクリプト形式) の 16 進ダンプを元に戻す場合は、列の数は影響しません。 2 桁の 16
進数と認識できるものはすべて変換されます。
.PP
\fI% xxd \-i file\fP
.br
と
.br
\fI% xxd \-i < file\fP
.br
の結果は違います。注意してください。
.PP
\fIxxd \-s +seek\fP と \fIxxd \-s seek\fP, の違いは、lseek(2) を使って入力を "巻き戻す" かどうかです。'+'
が意味を持つのは、入力が標準入力で、xxd が起動されたときに標準入力のファイル位置がファイルの先頭ではなかった場合です。
以下の例が分かりやすいかもしれません (もっと混乱するかも!):
.PP
`cat' が既に標準入力を終わりまで読んでいるので、読む前に標準入力を巻き戻す必要がある。
.br
\fI% sh \-c "cat > plain_copy; xxd \-s 0 > hex_copy" < file\fP
.PP
ファイル位置 0x480 (=1024+128) 前方から 16 進ダンプする。 `+' は 「現在地からの相対位置」を意味するので、dd が 1k
処理した後から、さらに `128' 進めます。
.br
\fI% sh \-c "dd of=plain_snippet bs=1k count=1; xxd \-s +128 > hex_snippet" < file\fP
.PP
ファイル位置 0x100 (=1024\-768) から 16 進ダンプする。
.br
\fI% sh \-c "dd of=plain_snippet bs=1k count=1; xxd \-s +\-768 > hex_snippet" < file\fP
.PP
このような使い方はあまりしませんし、`+' を使うこともほとんどないでしょう。 \-s を使うときはいつでも、strace(1) や truss(1)
を使って、xxd の働きをチェックすることをお勧めします。
.SH 例
.PP
.br
\fBファイル\fP の最初の三行 (16 進数で 0x30 バイト) 以降を出力する。
.br
\fI% xxd \-s 0x30 file\fP
.PP
.br
\fBファイル\fP の最後から三行 (16 進数で 0x30 バイト) を出力する。
.br
\fI% xxd \-s \-0x30 file\fP
.PP
注意: 以下の例の結果は 2024 年 5 月時点の xxd.1 マニュアルページに基づいています。
.PP
.br
120 バイトを、平文 16 進ダンプ形式で一行に 20 オクテットずつ出力する。
.br
\fI% xxd \-l 120 \-ps \-c 20 xxd.1\fP
.br
2e544820585844203120224d6179203230323422
.br
20224d616e75616c207061676520666f72207878
.br
64220a2e5c220a2e5c222032317374204d617920
.br
313939360a2e5c22204d616e2070616765206175
.br
74686f723a0a2e5c2220202020546f6e79204e75
.br
67656e74203c746f6e79407363746e7567656e2e
.br

.br
この man ページの先頭から 120 バイトを一行に 12 オクテットずつ 16 進ダンプする。
.br
\fI% xxd \-l 120 \-c 12 xxd.1\fP
.br
00000000: 2e54 4820 5858 4420 3120 224d .TH XXD 1 "M
.br
0000000c: 6179 2032 3032 3422 2022 4d61 ay 2024" "Ma
.br
00000018: 6e75 616c 2070 6167 6520 666f nual page fo
.br
00000024: 7220 7878 6422 0a2e 5c22 0a2e r xxd"..\e"..
.br
00000030: 5c22 2032 3173 7420 4d61 7920 \e" 21st May
.br
0000003c: 3139 3936 0a2e 5c22 204d 616e 1996..\e" Man
.br
00000048: 2070 6167 6520 6175 7468 6f72 page author
.br
00000054: 3a0a 2e5c 2220 2020 2054 6f6e :..\e" Ton
.br
00000060: 7920 4e75 6765 6e74 203c 746f y Nugent <to
.br
0000006c: 6e79 4073 6374 6e75 6765 6e2e ny@sctnugen.
.PP
.br
xxd.1 の日付部分だけを出力する。
.br
\fI% xxd \-s 0x33 \-l 13 \-c 13 xxd.1\fP
.br
00000033: 3231 7374 204d 6179 2031 3939 36 21st May 1996
.PP
.br
\fBinput_file\fP を \fBoutput_file\fP にコピーし、先頭に 0x00 を 100 バイト分付け加える。
.br
\fI% xxd input_file | xxd \-r \-s 100 > output_file\fP
.br

.br
xxd.1 の日付を修正する。
.br
\fI% echo "0000034: 3574 68" | xxd \-r \- xxd.1\fP
.br
\fI% xxd \-s 0x33 \-l 13 \-c 13 xxd.1\fP
.br
00000033: 3235 7468 204d 6179 2031 3939 36 25th May 1996
.PP
.br
中身がすべて 0x00 の 65537 バイトのファイルを作成する。 ただし、最後のバイトだけは 'A' (hex 0x41)。
.br
\fI% echo "010000: 41" | xxd \-r > file\fP
.PP
.br
作成したファイルをオートスキップを使って 16 進ダンプする。
.br
\fI% xxd \-a \-c 12 file\fP
.br
00000000: 0000 0000 0000 0000 0000 0000 ............
.br
*
.br
0000fffc: 0000 0000 41 ....A
.PP
一文字の 'A' からなる 1 バイトのファイルを作成する。
 '\-r \-s' の後に指定した数値がファイル中の行番号に加算され、結果、余計なバイトが飛ばされる。
.br
\fI% echo "010000: 41" | xxd \-r \-s \-0x10000 > file\fP
.PP
\fBvim(1)\fP の中から xxd をフィルタとして実行し、 マークされた `a' から `z' までの領域を 16 進ダンプする。
.br
\fI:'a,'z!xxd\fP
.PP
\fBvim(1)\fP の中から xxd をフィルタとして実行し、 マークされた `a' から `z' までの領域をバイナリに戻す。
.br
\fI:'a,'z!xxd \-r\fP
.PP
\fBvim(1)\fP の中から xxd をフィルタとして実行し、16 進ダンプされた行を元に戻す。 戻したい行にカーソルを移動して:
.br
\fI!!xxd \-r\fP
.PP
シリアル行から一文字読み込む
.br
\fI% xxd \-c1 < /dev/term/b &\fP
.br
\fI% stty < /dev/term/b \-echo \-opost \-isig \-icanon min 1\fP
.br
\fI% echo \-n foo > /dev/term/b\fP
.PP
.SH 返り値
以下のエラー値が返ります:
.TP 
0
エラーなし。
.TP 
\-1
操作がサポートされていない \%(\fI\%xxd \-r \-i\fP はまだ不可です)。
.TP 
1
引数の解釈に関するエラー。
.TP 
2
入力ファイルに関する問題。
.TP 
3
出力ファイルに関する問題。
.TP 
4,5
指定された位置へシークできなかった。
.SH 関連項目
uuencode(1), uudecode(1), patch(1)
.br
.SH 警告
この奇妙なツールは作者が使いやすいように作られています。 自己責任で使ってください。ファイルをコピーし、それを調べ、ウィザードたれ。
.br
.SH バージョン
このマニュアルは xxd バージョン 1.7 (2024\-05) について説明しています。
.SH 著者
.br
(c) 1990\-1997 by Juergen Weigert
.br
<jnweiger@informatik.uni\-erlangen.de>
.LP
私の功績として自由に配布してください。
.br
儲かったら教えてください。
.br
損しても知りません。
.PP
マニュアルは Tony Nugent
.br
<tony@sctnugen.ppp.gu.edu.au> <T.Nugent@sct.gu.edu.au>
.br
によって書かれ、 Bram Moolenaar が少し変更を加え、 Juergen Weigert が編集しました。
.PP
