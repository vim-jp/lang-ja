===============================================================================
=    V I M 教 本 (チュートリアル) へ よ う こ そ        -    Version 1.7      =
===============================================================================
=				    第 2 章				      =
===============================================================================

     Hic Sunt Dracones (危険な領域): もしこれがあなたにとって vim に初めて
     触れる機会であり、入門の章を利用したいのであれば、どうか :q<enter> を
     タイプして再挑戦してください。

     この章を完了するのに必要な時間は、覚えたコマンドを試すのにどれだけ時間を
     使うのかにもよりますが、およそ 8-10 分です。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 2.1.1: 名前付きレジスタ


   ** ヤンク(コピー)した 2 つの単語を同時に保存し、それらをペーストします **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. 単語 'Edward' 内のどこかに移動し  "ayiw  とタイプしましょう。

覚え方: into register(") named (a) (y)ank (i)nner (w)ord
   {訳: レジスタ(")へ (a)という名前の (y)ヤンク (i)内部 (w)単語}

  3. 単語 'cookie' に進んで (fk や 2fc や $2b や /co<enter>)、  "byiw
     とタイプしましょう。

  4. 単語 'Vince' 内のどこかに移動し  ciw<C-r>a<ESC>  とタイプしましょう。

覚え方: (c)hange (i)nner (w)ord with <contents of (r)egister> named (a)
   {訳: (c)変更する (i)内部 (w)単語 <(r)レジスタの内容>で (a)という名前の}

  5. 単語 'cake' 内のどこかに移動し  ciw<C-r>b<ESC>  とタイプしましょう。

--->  a) Edward will henceforth be in charge of the cookie rations
      b) In this capacity, Vince will have sole cake discretionary powers

NOTE: レジスタへの削除も動作します。すなわち "sdiw はカーソル位置の単語を削除
      し、レジスタ s に格納します。

REFERENCE: 	レジスタ	 :h registers
		名前付きレジスタ :h quotea
		カーソル移動	 :h motion.txt<enter> /inner<enter>
		CTRL-R		 :h insert<enter> /CTRL-R<enter>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		     Lesson 2.1.2: EXPRESSION レジスタ


	            ** 計算の結果をその場で挿入します **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. 行内の数字のどこかにカーソルを移動しましょう。

  3. 次のようにタイプしましょう。  ciw<C-r>=60*60*24<enter>

  4. 次の行で挿入モードに入り、次の操作で今日の日付を挿入しましょう。
     <C-r>=system('date')<enter>

NOTE: すべてのシステムへの呼び出しは OS 依存です。例えば Windows では
      system('date /t')   または   :r!date /t   を使います。

---> 1 日の正確な秒数を忘れてしまいました。 84600 でしょうか?
     今日の日付は: 

NOTE: 同じことは  :pu=system('date')  あるいは、より少ないキーストロークで
      :r!date  でも達成できます。

REFERENCE: 	Expression レジスタ 	:h quote=

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		      Lesson 2.1.3: 番号付きレジスタ


	    ** yy と dd  を押してレジスタに対する効果を目撃します **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. 0 番目の行をヤンクし、それから  :reg<enter>  でレジスタを検査しましょう。

  3. "cdd  で行 0 を削除し、それからレジスタを検査しましょう。
     (行 0 はどこにあると思いますか?)

  4. 残りの行もそれぞれ続けて削除して、都度 :reg で検査しましょう。

NOTE: 新しい行全体削除が追加されると、古い行全体削除はリストの下に移動すること
      に気づいたでしょう。

  5. 次に以下のレジスタを順にペースト(p)しましょう: c, 7, 4, 8, 2。例 "7p

---> 0. This
     9. wobble
     8. secret
     7. is
     6. on
     5. axis
     4. a
     3. war
     2. message
     1. tribute

NOTE: 行全体削除(dd)は、行全体ヤンクや小さな移動による削除に比べると長い期間
      番号付きレジスタに残ります。

REFERENCE: 	番号付きレジスタ 	:h quote0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		      Lesson 2.1.4: マークの美しさ


	              ** コードモンキーの算術の回避 **

NOTE: コーディングの際の共通の難問は大きなコードの塊を動かすことです。
      以下の技術は、操作に関連付けられた行数の計算、例えば   "a147d   や
      :945,1091d a   や、さらに悪いことにまず   i<C-r>=1091-945<enter>   を
      使うようなことを避けることを助けます。

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. 関数の最初の行に移動し   ma   でマークしましょう。

NOTE: 行内の正確な位置は重要ではありません!

  3. 行の最後に移動しそれからコードブロックの末尾に移動しましょう。  $%

  4. ブロックをレジスタ a に削除しましょう。   "ad'a

覚え方: into register(") named (a) put the (d)eletion from the cursor to the
        LINE containing mark(') (a)
   {訳: レジスタ(")へ格納 (a)という名前の (d)削除を カーソルからマーク(')(a)
        を含む行まで}

  5. ブロックを BBB と CCC の間にペーストしましょう。   "ap

NOTE: 慣れるまで何度もこの操作を練習しましょう。  ma$%"ad'a

---> AAA
     function itGotRealBigRealFast() {
       if ( somethingIsTrue ) {
         doIt()
       }
       // 私たちの関数の分類法が変更され、現在の位置では
       // アルファベットの意味がなくなりました

       // 何百行ものコードを想像してください

       // 素朴に、最初と最後に移動して、各行番号を記録または記憶する
       // こともできます
     }
     BBB
     CCC

NOTE: マークとレジスタは名前空間を共有しません。そのため、レジスタ a は完全に
      マーク a とは独立しています。これはレジスタとマクロについては当てはまり
      ません。

REFERENCE: 	マーク 		 :h marks
		マークによる移動 :h mark-motions  (' と ` の違いについて)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			       Lesson 2.1 要約


  1. テキストを格納 (ヤンク、削除) したり、取得 (ペースト) するレジスタが
     全部で 26 個 (a-z) あります。
  2. 単語全体をヤンクするには単語内のどこかで:   yiw
  3. 単語全体を変更するには単語内のどこかで:   ciw
  4. 挿入モードで直接レジスタからテキストを挿入するには:   (C-r)a

  5. 単純な算術演算の結果を挿入するには: 挿入モードで  (C-r)=60*60<enter>
  6. システムコールの結果を挿入するには: 挿入モードで  (C-r)=system('ls -1')

  7. レジスタを検査するには   :reg
  8. 行全体削除の最終宛先を学びました。dd は番号付きレジスタへ、すなわち
     レジスタ 1 - 9 に降順になります。行全体削除は他の操作より長く番号付き
     レジスタに保持されることを理解しました
  9. 番号付きレジスタにおけるすべてのヤンクの最終宛先と、それらはどれほど儚い
     ものなのかを学びました

 10. コマンドモードでマークを設定するには   m[a-zA-Z0-9]
 11. マークへ行単位で移動するには   '

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  これにて Vim のチュートリアルの第 2 章を終わります。これは作業中です。

  この章は Paul D. Parker によって書かれました。

  日本語訳  vim-jpチーム <https://github.com/vim-jp/lang-ja>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
